py manage.py runserver
py manage.py shell

from news.models import *
User.objects.create(username='Sunny')
User.objects.create(username='Ted')
Author.objects.create(user=user1)
Author.objects.create(user=user2)
Cathegory.objects.create(cathory='современное искусство')
Cathegory.objects.create(cathegory='наука')
Cathegory.objects.create(cathegory='политика')
Cathegory.objects.create(cathegory='IT')
art1 = Post.objects.create(author = author1, post_type = "AR", title = 'Street Art', text = 'Это не вандализм, а современное искусство.')
news1 = Post.objects.create(author = author2, post_type = "NW", title = "Лабораторное искусство", text = 'Современный художник представил  на выставке картины из плесени в чашках Петри.')
news2 = Post.objects.create(author = author1, post_type = "NW", title = 'Россию отключат от SWIFT', text = 'Сказали европейцы. Но это не точно.')
art2 = Post.objects.create(author = author2, post_type = "AR", title = 'Миграция', text = 'Это важная штука! Не забывай про неё!')
art1.cathegory.add(cat_1)
news1.cathegory.add(cat_1)
news1.cathegory.add(cat_2)
news2.cathegory.add(cat_3)
art2.cathegory.add(cat_4)
Comment.objects.create(post=news5, user=user2, comment_text='Бля! Воистину охуели')
Comment.objects.create(post=news1, user=user1, comment_text='Фу, мерзость какая!')

user1 = User.objects.get(id=1)
user2 = User.objects.get(id=2)
author1 = Author.objects.get(id=1)
author2 = Author.objects.get(id=2)
cat_1 = Cathegory.objects.get(id=1)
cat_2 = Cathegory.objects.get(id=2)
cat_3 = Cathegory.objects.get(id=3)
cat_4 = Cathegory.objects.get(id=4)
art1 = Post.objects.get(id=1)
news1 = Post.objects.get(id=2)
news2 = Post.objects.get(id=3)
art2 = Post.objects.get(id=4)
com1=Comment.objects.get(id=1)
com2=Comment.objects.get(id=2)

на всякий случай старый код для вьюшки

from django.shortcuts import render
from django.views import View  # импортируем простую вьюшку
from django.core.paginator import Paginator  # импортируем класс, позволяющий удобно осуществлять постраничный вывод
from django.views.generic import ListView, DetailView
from .models import Post, Comment
from datetime import datetime


class NewsList(ListView):
    model = Post, Comment
    template_name = 'news.html'
    context_object_name = 'news'
    queryset = Post.objects.order_by('-id')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['time_now'] = datetime.utcnow()  # добавим переменную текущей даты time_now
        context[
            'value1'] = None  # добавим ещё одну пустую переменную, чтобы на её примере посмотреть работу другого фильтра
        return context

class NewsView(DetailView):
    model = Post, Comment
    template_name = 'newsdetail.html'
    context_object_name = 'newsdetail'
    queryset = Post.objects.order_by('-id')

class CommentList(ListView):
    model = Post, Comment
    template_name = 'newsdetail.html'
    context_object_name = 'comments'
    queryset = Comment.objects.order_by('-id')

class CommentView(DetailView):
    model = Post, Comment
    template_name = 'newsdetail.html'
    context_object_name = 'comment'
    queryset = Post.objects.order_by('-id')


работающий код пагинатора

class NewsList(View):

    def get(self, request):
        news = Post.objects.order_by('-datetime')
        p = Paginator(news, 1)

        news = p.get_page(request.GET.get('page',1))

        data = {
            'news': news,
        }
        return render(request, 'news.html', data)

ещё один рабочий код с пагинатором
class NewsList(ListView):
    model = Post
    template_name = 'news.html'
    context_object_name = 'news'
    ordering = ['-datetime']
    paginate_by = 1


